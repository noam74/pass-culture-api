version: 2.1
orbs:
  slack: circleci/slack@4.2

slack-fail-post-step: &slack-fail-post-step
  post-steps:
    - slack/notify:
        event: fail
        channel: sh√©rif
        custom: |
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Oups, `nightly` a eu un soucis cette nuit :pleurs:"
                },
                "accessory": {
                  "type": "image",
                  "image_url": "https://upload.wikimedia.org/wikipedia/commons/f/f3/Airport-firefighters-drill.jpg",
                  "alt_text": "Nightly down"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View job",
                      "emoji": true
                    },
                    "url": "$CIRCLE_BUILD_URL"
                  }
                ]
              }
            ]
          }

slack-send-deployment-notification: &slack-send-deployment-notification
  - slack/notify:
      event: pass
      channel: alertes-deploiement
      custom: |
        {
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "${CIRCLE_SHA1} has been successfully deployed to testing :muscle:"
              }
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "View job",
                    "emoji": true
                  },
                  "url": "$CIRCLE_BUILD_URL"
                }
              ]
            }
          ]
        }
  - slack/notify:
      event: fail
      channel: alertes-deploiement
      custom: |
        {
          "blocks": [
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "${CIRCLE_SHA1} this deployment has failed :pleurs:"
              }
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "View job",
                    "emoji": true
                  },
                  "url": "$CIRCLE_BUILD_URL"
                }
              ]
            }
          ]
        }

###################
#  EXECUTORS
###################

executors:
  gcp-sdk:
    docker:
      - image: google/cloud-sdk:316.0.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD

  helm:
    docker:
      - image: ${GCP_REGION}-docker.pkg.dev/${GCP_INFRA_PROJECT}/${GCP_TOOLS_REGISTRY_NAME}/helm-gcp:3.4.1
        auth:
          username: _json_key # default username when using a JSON key file to authenticate
          password: $GCP_INFRA_KEY

###################
#  COMMANDS
###################

commands:

  authenticate_gcp:
    description: Authenticate to a GCP project
    parameters:
      gcp-key-name:
        type: env_var_name
    steps:
      - run: echo ${<< parameters.gcp-key-name >>} > ${HOME}/gcp-key.json
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${GCP_PROJECT}

  export_chart_version:
    description: Export Helm chart version number as environment variable
    parameters:
      version_file:
        type: string
    steps:
      - run: echo "export CHART_VERSION=$(cat << parameters.version_file >> | tr -d '[:space:]')" >> $BASH_ENV

  deploy-helm-chart:
    description: Deploy Crons and worker via helm to Kubernetes Cluster
    parameters:
      helm_release_name:
        type: string
      helm_chart_name:
        type: string
      kubernetes_namespace:
        type: string
      helm_values_file:
        type: string
      app_version:
        type: string
    steps:
      - run: |
          source ${BASH_ENV}
          helm upgrade << parameters.helm_release_name >> tmp/<< parameters.helm_chart_name >> \
            --install --wait \
            --namespace << parameters.kubernetes_namespace >> \
            --values << parameters.helm_values_file >> \
            --set-string image.tag=<< parameters.app_version >>

###################
#  JOBS
###################

jobs:
  run-tests:
    parameters:
      pytest_extra_args:
        description: "directories to include and ignore"
        default: "tests"
        type: string
    working_directory: ~/pass-culture-api-ci
    docker:
      - image: circleci/python:3.9.4
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          DATABASE_URL_TEST: postgresql://pytest:pytest@localhost:5432/pass_culture
          REDIS_URL: redis://localhost:6379
      - image: circleci/postgres:12.3-postgis
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
        environment:
          POSTGRES_USER: pytest
          POSTGRES_PASSWORD: pytest
          POSTGRES_DB: pass_culture
      - image: redis
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - unless:
          condition:
            equal: [ "master", << pipeline.git.branch >> ]
          steps:
            - restore_cache:
                key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install requirements
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt --progress-bar off
      - unless:
          condition:
            equal: [ "master", << pipeline.git.branch >> ]
          steps:
            - save_cache:
                key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
                paths:
                  - "venv"
      - run:
          name: Install pcapi Python package
          command: |
            venv/bin/pip install -e .
            venv/bin/pip freeze
      - run:
          name: Check for alembic multiple heads
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python -m nltk.downloader punkt stopwords &> /dev/null
            if [ ! -z "$(alembic branches)" ]; then echo "Multiple alembic heads found"; exit 1; fi
      - run:
          name: Check database and model are aligned
          command: |
            RUN_ENV=tests venv/bin/python src/pcapi/install_database_extensions.py
            RUN_ENV=tests venv/bin/alembic upgrade head
            RUN_ENV=tests venv/bin/python tests/alembic/check_db_schema.py
      - run:
          name: Running tests
          command: >
            RUN_ENV=tests venv/bin/pytest << parameters.pytest_extra_args >> --durations=10
            --junitxml=test-results/junit.xml
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: htmlcov

###################
#  WORKFLOWS
###################

workflows:
  commit:
    jobs:
      - run-tests:
          name: "Run core tests after commit"
          pytest_extra_args: "tests/core"
      - run-tests:
          name: "Run routes tests after commit"
          pytest_extra_args: "tests/routes"
      - run-tests:
          name: "Run other tests after commit"
          pytest_extra_args: "tests --ignore=tests/core --ignore=tests/routes"
